import argparse
import datetime
import json
import os
import sys

working_dir = os.path.abspath("..")
sys.path.insert(0, working_dir)


def load_data(path_to_subtitle_data):
    # subtitle_data = [
    #     {
    #         "start_timecode": "00:00:01.00",
    #         "end_timecode": "00:00:05.00",
    #         "setting": "Hello, world!",
    #     },
    #     {
    #         "start_timecode": "00:00:06.00",
    #         "end_timecode": "00:00:10.00",
    #         "setting": "This is a subtitle.",
    #     },
    #     # Add more entries as needed
    # ]

    with open(path_to_subtitle_data, "r", encoding="utf-8") as json_file:
        scenes_with_handmade_labels = json.load(json_file)

    subtitle_data = []
    for scene in scenes_with_handmade_labels:
        subtitle_data.append(
            {
                "start_timecode": scene["start_timecode"],
                "end_timecode": scene["end_timecode"],
                "setting": scene["captions"][0]["setting"],
            }
        )

    return subtitle_data


def timecode_to_ass_format(timecode):
    # Convert 'HH:MM:SS.FF' to 'H:MM:SS.cc' (ASS format with centiseconds)
    dt = datetime.datetime.strptime(timecode, "%H:%M:%S.%f")
    total_seconds = dt.hour * 3600 + dt.minute * 60 + dt.second + dt.microsecond / 1e6
    hours = int(total_seconds // 3600)
    minutes = int((total_seconds % 3600) // 60)
    seconds = int(total_seconds % 60)
    centiseconds = int(round((total_seconds - int(total_seconds)) * 100))
    return f"{hours}:{minutes:02d}:{seconds:02d}.{centiseconds:02d}"


def create_save_subtitles(subtitle_data):
    # ASS file header
    ass_header = """[Script Info]
    ; Script generated by Python
    Title: Subtitles
    ScriptType: v4.00+
    Collisions: Normal
    PlayResX: 640
    PlayResY: 480
    WrapStyle: 0
    ScaledBorderAndShadow: yes
    YCbCr Matrix: None

    [V4+ Styles]
    Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
    Style: Default,Arial,24,&H00FFFFFF,&H0000FFFF,&H00000000,&H64000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

    [Events]
    Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
    """

    # Generate ASS events
    ass_events = ""
    for entry in subtitle_data:
        start = timecode_to_ass_format(entry["start_timecode"])
        end = timecode_to_ass_format(entry["end_timecode"])
        text = entry["setting"].replace(
            "\n", "\\N"
        )  # Replace newlines with ASS newline
        event_line = f"Dialogue: 0,{start},{end},Default,,0,0,0,,{text}\n"
        ass_events += event_line

    # Combine header and events
    ass_content = ass_header + ass_events

    # Write to file
    save_dir = "../results"
    os.makedirs(save_dir, exist_ok=True)

    with open(os.path.join(save_dir, "subtitles.ass"), "w", encoding="utf-8") as f:
        f.write(ass_content)

    print("ASS subtitle file 'subtitles.ass' has been created.")


if __name__ == "__main__":
    # python generate_subtitles.py --path_to_subtitle_data "../results/scenes_with_settings_predicted.json"
    parser = argparse.ArgumentParser(
        description="Generating 'subtitles.ass' file for video subtitles."
    )

    parser.add_argument(
        "--path_to_subtitle_data",
        type=str,
        default=None,
        help="Path to the subtitle data. Should be a '.json' file",
    )

    # Parse the arguments
    args = parser.parse_args()

    # Load Data
    subtitle_data = load_data(args.path_to_subtitle_data)

    # Generate and save 'subtitles.ass' file
    create_save_subtitles(subtitle_data)
